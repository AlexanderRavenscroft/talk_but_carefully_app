class ColorSelection extends StatefulWidget {
  const ColorSelection({super.key});

  @override
  State<ColorSelection> createState() => _ColorSelectionState();
}

class _ColorSelectionState extends State<ColorSelection> {
  final List<int> colorSelectionList = [
    0xFFEB545D,
    0xFF62BAF3,
    0xFF6DE5B5,
    0xFFAA54EA,
    0xFFF3D677
  ];
  int teamASelectedIndex = 0; // Team A's selected color index
  int teamBSelectedIndex = 1; // Team B's selected color index
  bool areTeamBSettings = false; // Toggle between Team A and Team B

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        // Toggle Button to switch teams
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              "Editing: ",
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            Switch(
              value: areTeamBSettings,
              onChanged: (value) {
                setState(() {
                  areTeamBSettings = value;
                });
              },
            ),
            Text(
              areTeamBSettings ? "Team B" : "Team A",
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ],
        ),
        SizedBox(height: 20),
        // Color Picker Grid
        Wrap(
          spacing: 10,
          runSpacing: 10,
          children: List.generate(colorSelectionList.length, (index) {
            // Check if the color is already selected by the opposite team
            bool isDisabledForCurrentTeam = areTeamBSettings
                ? index == teamASelectedIndex
                : index == teamBSelectedIndex;

            return GestureDetector(
              onTap: () {
                // Only allow selection if the color is not disabled
                if (!isDisabledForCurrentTeam) {
                  setState(() {
                    if (areTeamBSettings) {
                      teamBSelectedIndex = index;
                    } else {
                      teamASelectedIndex = index;
                    }
                  });
                }
              },
              child: Container(
                width: 60,
                height: 60,
                decoration: BoxDecoration(
                  color: Color(colorSelectionList[index]),
                  border: Border.all(
                    color: areTeamBSettings
                        ? (teamBSelectedIndex == index
                            ? Colors.orange
                            : Colors.transparent)
                        : (teamASelectedIndex == index
                            ? Colors.orange
                            : Colors.transparent),
                    width: 3,
                  ),
                  borderRadius: BorderRadius.circular(10),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.2),
                      blurRadius: 4,
                      offset: Offset(0, 2),
                    ),
                  ],
                ),
                child: isDisabledForCurrentTeam
                    ? Icon(
                        Icons.block,
                        color: Colors.white,
                      )
                    : null, // Show blocked icon if disabled
              ),
            );
          }),
        ),
      ],
    );
  }
}